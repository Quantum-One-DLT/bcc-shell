#TODO review for flow and routing
msc {
  hscale = "2";
  user, bcc_launcher, klarity, bcc_node, blockchain;

  user->bcc_launcher [ label = "User runs Klarity (actually starts bcc_launcher)" ];

  --- [ label = "First, run the update system" ];
  bcc_launcher->bcc_launcher [ label = "Check for presence of file at updaterPath and run with updateArchive" ];

  --- [ label = "Now, launch the frontend and node" ];
  bcc_launcher->klarity [ label = "start klarity frontend with launcher walletArgs" ];
  klarity->bcc_node [ label = "start bcc-node with launcher nodeArgs" ];

  bcc_node->klarity [ label = "\"Started\" NodeIPC message" ];
  bcc_node<-klarity [ label = "\"QueryPort\" NodeIPC message" ];
  bcc_node->klarity [ label = "\"ReplyPort 12345\" NodeIPC message" ];

  ...;

  klarity->bcc_node [ label = "GET https://localhost:12345/api/v1/node-info (polling)" ];
  klarity<-bcc_node [ label = "200 OK - sync progress" ];

  ...;

  blockchain->bcc_node [ label = "upd-bin csl-klarity:5 linux64 HASH" ];
  --- [ label = "bcc will compare available updates with applicationName, applicationVersion and systemTag from configuration.yaml" ];
  --- [ label = "bcc_node downloads the installer HASH by HTTP from the update server" ];

  bcc_node<-klarity [ label = "GET /api/internal/next-update (by polling)" ];
  --- [ label = "if the file has been downloaded, this will return HTTP status 200" ];
  bcc_node->klarity [ label = "200 OK - applicationName and version" ];

  klarity->user [ label = "\"An update is available - version, restart?\"" ];
  user->klarity [ label = "Yes" ];

  klarity->bcc_node [ label = "POST /api/internal/apply-update" ];
  bcc_node->klarity [ label = "ExitFailure 20 -- node shuts down then exits" ];
  klarity->bcc_launcher [ label = "ExitFailure 20 -- wallet exits" ];

  --- [ label = "if wallet exited with status 20, then bcc_launcher goes back to start" ];

}
